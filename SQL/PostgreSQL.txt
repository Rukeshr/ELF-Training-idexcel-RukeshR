======PostgreSQL======

1. Write a command to check the version of postgreSQL.
   select version(); 

2. Write a command to get a list of all available databases.
   \l

4. Write a command to create a database.
   create database db_name;
   ex : create database idexcel_db;

3. Write a command to use or switch to a particular database.
   \c <database_name>
   ex : \c idexcel_db
 
4. Write a command to create a table.
   create table table_name (col_name1 datatype constraints,
		            col_name2 datatype constraints,
			    col_name3 datatype constraints,...
			    col_namen datatype constraints);

   ex : create table Employee( id int primary key,
			       name varchar(100),
			       mobile double precision,
			       salary double precision);

5.  Write a command to describe a particular table.
    \d <table_name>
	
6.  \? = You can get the list of all the available commands.

7. Write a query to insert a values to the table.
   Insert into table (column1,column2,column3,....coulumnN) 
	             values (value1,value2,value3...valueN);

   ex:create table Employee( id,name,mobile,salary) values 
		           (01,'name',8880031699,25000);   

8. Write a command to add new column to the existing table.
   Syntax : alter table table_name add column new_col_name datatype;

   ex: alter table Employee add age int;

9. Write a command to change the column old_name to new_name
   Syntax :   alter table table_name rename column col_name to new_col_name;

   ex: alter table employee rename column id to empid; 

10. Write a command to rename the database name
    firstly go back postgres database by giving the command (\c postgres)
    and alter database old_name rename to new_name

    ex: alter database Employee rename to Newdatabase; 
 
11. Write a command to rename the table name 
    firstly go back postgres database by giving the command (\c postgres)
    and alter table old_name rename to new_name

    ex: alter table Employee rename to NewTable;

12. WAQ to drop(delete) a particular column
    Syntax :  alter table table_name drop column_name

    ex: alter table newtable drop age;

13. WAQ to drop(delete) a table
    Syntax : drop table table_name;

    drop table newtable;

14. WAQ to display ename,departmentno and hiredate.
    select ename,deptno,hiredate from employee;

15. WAQ to display ename. 
    select ename from employee;

16. WAQ to display all the elements in a table.
    select * from employee;

17. update : update tab_name set col_name=value;
    delete : delete from tab_name;

18. Where clause : used to filter records.

19. Order of excuetion :
	From
	where : row by row will execute and it check with the conditions given and filter out the results. 
	select

20. WAQ to update salary whose id is 1.
    update employee set salary=25000 where empid=1;

21. Delete from employee where empid=10;

22. WAQ to insert 2 values in a same query? 
    insert into employee (empid,ename,salary,designation,hiredate,age,email,deptno,mobile) values 
    (11,'abc',25000,'software','2015-03-14',24,'abc@gmail.com',10,1234567890),
    (12,'xyz',25000,'software','2015-03-14',24,'xyz@gmail.com',10,1234567890);

====================================================================================================

    WAQ to delete a record whose id is 12
    delete from employee where empid=12;

    Expression : Consists of operators and operands
 	     is a statement which gives results
    operands : 1> Column_name
	       2> Literals
alias 

Syntax : Select col_name as alias_name from table_name as alias_name;
	 Select col_name alias_name from table_name alias_name;  
	
	 WAQ to change a colname as job title for temporary.
         select designation as job_title from employee;
	
	 WAQ to obtain emp name with his current salary and new salary with a hike of 5%
         select ename,salary,(salary+(Salary*15/100)) as Hike from employee;

	 WAQ to display all the emp records incremented with 500 rs each employee
         update employee set salary=salary+500; (or)
	 select ename,salary,salary+500 as Hike from employee;
 
	 WAQ to display all the emp records decremented with 500 rs each employee
         update employee set salary=salary+500; (or)
	 select ename,salary,salary-500 as Hike from employee;

	 WAQ to display name,salary and annual sal of all the employee
         select ename,salary,salary*12 as Annual from employee;

	 WAQ to display per day salary of the employee
         select ename,salary,salary/21 as Day_Salary from employee;
========================================================================================

	Distinct - Used to get the unique values from the column or table.
 	Syntax : Select DISTINCT col_name from Table_name;

	ex: select distinct ename from employee; it removes the duplicate what ever column have duplicates

	select distinct ename,deptno from employee; it removes the combination of column of duplicates 

	Comparision operator ( =,>,<,>=,<=,!=,<>) after where condition col_name operator value 
	
	WAQ to display all the records of the employee who are working in the dept is equal to 10.
	@ select * from employee where deptno=10;
	
	WAQ to display all the records of the employee whose salary is greater 20000;
	@ select * from employee where salary>20000;

	WAQ to display all the records of the employee whose salary greater than equal to 20000;
	@ select * from employee where salary>=20000;

	WAQ to display all the records of the employee whose salary less than 20000;
	@ select * from employee where salary<20000;

	WAQ to display all the records of the employee whose salary less than 20000;
	@ select * from employee where salary<=20000;

	WAQ to display all the records of the employee whose salaryis not equal 20000;
	@ select * from employee where salary!=20000;

	WAQ to display all the records of the employee whose salary is not equal 20000;
	@ select * from employee where salary<>20000;
========================================================================================================
	Logical operator : AND, OR, NOT
	
	AND : Syntax = Select col_name/* from table_name where condition 1 AND condition 2.
	OR  : Syntax = Select col_name/* from table_name where conditon 1 OR condition 2.
	NOT : Syntax = Select col_name/* from table_name where NOT condition.

	WAQ to display all the records whose is working as hr and deptno 10. 
	select * from employee where designation='HR' and deptno=10;
	
	WAQ to display all the records of the employee whose is working as salesman and hired after 2016
	select * from employee where designation='salesman' and hiredate>'2016-12-31';
	
	WAQ to display all the records of the emp who is working as HR in deptno 10 & whose salary is 10000
	select * from employee where designation='HR' and deptno=10 and salary>10000;
	
	WAQ to display all the records of the emp who is working in dept 10 or 20. 
	select * from employee where deptno=10 or deptno=20;

	WAQ to display name salary deptno who is working as tester or whose salary = 15000;
	select ename,salary,deptno from employee where designation='Tester' or salary=15000;

	WAQ to display all the records whose is working as tester as working in dept in 30 or working as clerk as well as whose sal>15000;
	Select * from employee where (designation='Tester' and deptno=30) or (designation='clerk' and salary>15000);
	
	WAQ to display all the records who are not working in the deptno 20.
	select * from employee where not deptno=20;
=======================================================================================================	
	
	
	LIKE : used for pattern matching
	----
	special character for pattern matching : % and _
`	Syntax : Select * from table_name where col_name LIKE '%_';
	
	WAQ to display all the records of the employee whose name starts with R
	@ select * from employee where ename like 'R%';	

	WAQ to display all the records of the employee whose name having only 3 character.
	@ select * from employee where ename like '___';

	WAQ to display all the records of the employee name who have atleast 2 l in there names.
	@ select * from employee where ename like '%l%l%';
	
	WAQ to display all the records of the employee whose name starts with s and end with c.
	@ select * from employee where ename like 'S%p';
	
	WAQ to display all the records of the employee whose name length 5 and starts with s and l should be last 2nd character.
	@ select * from employee where ename like 's__l_';

	
	WAQ to display all the records of the employee if the emp name begins with s or a ;
	@ select * from employee where ename like 'a%' or ename like 'S%';

	WAQ to display all the records of the employee excluding emp name begings with z and p.
	@ select * from employee where ename not like 'z%' and ename not like 'p%';

====================================================================================================================

	Function : Perfroms a specific task
	
	Two categories : 
	Aggregate function (multi row function) : Giving 'n' input to the function and getting only 'one' output.
 	Scalar function (Single row function) : Giving 'n'/'per' input to the function and getting only 'n'/'per' outputs.
	
	Aggregate inbulit function :
	AVG() : Returns average value
	Syntax : Select avg(col_name) from table_name;
	         ex : select avg(Salary) from employee; 

	COUNT() : it counts the number of rows
	Syntax :  Select count(col_name) from table_name;
		  ex: select count(*) from employee; 
		
	MAX() : returns maxium value of selected column.
		Syntax : select max(col_name) from table_name;
		ex: select max(salary) from employee;

	MIN() : returns minimum value of selected column.
		syntax : select min(col_name) from table_name;
		Ex : select min(salary) from employee;

	SUM() : returns sum of all the values of the selected column
	        syntax : select sum(col_name) from table_name;
		Ex : select sum(salary) from employee;
=========================================================================
	
	Order by clause : Used to sort the result in ascending or desending 
	
	Syntax : select col_name, * from table_name order by col_name ASC|DESC; By default : ASC
	
	NOTE : Executes after select clause 
	       Order by should be written in the last of the query
	       Group by clause is used in order by cluase we can multi row function only for the col_name or expression which is used in order by clause.
	
	WAQTDAR of the employee salary should be desending order
	@ select * from employee order by salary DESC;
	
	WAQ to display all the detail of the employee and sort the record in asending order of hiredate if there are one employee hired on the same date then highest salary should be shown first 
	@  select * from employee order by hiredate asc,salary desc;

	WAQ to name of the emp salary annaul and sort the record in asending of the annual salary
	@ select ename,salary,salary*12 annual from employee order by annual desc;
	
	WAQ name designation of the all the emp either of the dept 10 20 40  and sort the record in asc by their salary
	@ select ename,designation,salary from employee where deptno in (10,20,40) order by salary asc;

==============================================================================================================================

	Group by clause : Often used with aggregate function 
	---------------
		
	Syntax : select col_names from table_nae where condition group by col_name;
		
	WAQTD no of count of the employee working in each department
	select count(*) from employee group by deptno; 

	NOTE : Executes row by row
	       After the execution of group by clause the record are grouped, therfore all the clause whuch executes after the group by clause it will execute grouo by group. 

	WAQTD highest salary in each deptno
	select count(*),deptno from employee group by deptno;

 	WAQ to display no of tester working in each department;
	select count(*),deptno from employee where designation='Tester' group by deptno;

	Having clause 
	-------------
	
	Note : If i have to filter the record after the group by the we have to use having clause.

	Syntax : Select */Col_name from table_name where (row _filter_condition) group by col_name having (group_filter_condition);
	Executes after the group by clause 
	
	WAQTD  dept no which have atleast 2 clerk working  
	select deptno from employee where designation='clerk' group by deptno having count(*)>=2;

==================================================================================================================================
	
	WAQTD deptno which has total salary > 10000 in each department no 
	select deptno from employee group deptno having sum(salary);

	WAQTD deotno which has atleast two employee hired in a same date.	
	select deptno from employee group by hiredate,deptno having count(*)>=2;

	WAQTD deptno and avg salary of the all the employee whose avg salary is > 15000 by excluding the employee whose names begins with R
	select deptno,avg(salary) from employee where ename like not like ('R%') group by avg(salary) > 15000;
	
	Subqueries : Query written inside the another query is called as sub query
	Syntax : Select * from tab_name where col_name operator (select */col_name from tab_name where condition)
		         (Outer query) 		                                   (Inner query) 
								     (Query written inside the parenthysis)

	Sub query is divided into 2 types : 
	* Single-row Subquery
	* Multi-row Subquery

	Single-row subquery 
	Inner Query returns a single record (comparison operator) 

	Syntax: Select * from tab_name where col_name OPERATOR (select * from tab_name where expr = value);
 	
	Multi-row subquery 
	Inner query returns one or more records (special operator only = in, all, any)

	Syntax :Select * from tab_name where col_name OPERATOR (select * from tab_name where expr = value);
	
	Syntax :Select * from tab_name where col_name OPERATOR (select * from tab_name where expr = value);

	WAQTD name of the all the employee who were hired after Rukesh
	select * from employee where hiredate > (select hiredate from employee where ename like 'Rukeshr');

	WAQTD to display name of the all emp who is working for research dept
	select ename from employee where deptno = (select dno from dept_info where dname='research');

	WAQ to display name of the emp whose in working in the location which has atleast one "A"
	sselect ename from employee where deptno in (select dno from dept_info where location like '%a%');

	WAQ to display second maximum salary
	select max(salary) from employee where salary < (Select max(salary) from employee);

	WAQ to display deptname which has atleast 2 clerk
	select dname from dept_info where dno in (select deptno from employee where designation='Clerk' group by deptno having count(*)>=2);

	WAQ to display 3rd max salary
	select max(Salary) from employee where salary<(select max(Salary) from employee where salary<(select max(Salary) from employee)); 
	
	WAQ name of the emp who hired after rukesh and their salary > Yogesh 
	select ename from employee where hiredate < (select hiredate from employee where ename='Rukeshr') and salary > (select salary from employee where ename='Yogesh');

===================================================================================================================================================================================
	
	Joins : Used to fetch the data from two or more tables.
	
	Minimum 2 tables are required for joins 
	
	Types of JOINS :
	Cross join
	Inner join
	Outer join
	Self join
	Natural join

	Cross join (Cartesian join) : Two tables are merged together (Each and every record from left table will merge with each and every record present in the right table. )
	
	Formula : No of rows in left table * No of rows in right table.

	left 	  Right
	A1 B1	  A2 B2
	A 20 	  C  10
	B 30 	  D  50

	  A1 B1 A2 B2
	  A 20  C  10
	  B 30  D  50

	Syntax: Select * / Col_name from table_name cross join table2
	
	Select * from employee cross join dept_info;

	Inner join :  Two tables are merged together based on join condition.
	
	Syntax : Select * from table_name inner join table2 on join condition;  
	
	select * from employee as A inner join dept_info as D on A.deptno = D.dno;

	WAQ display dept name location of the all the employee whose salary > 40000.
	select location from employee as A inner join dept_info as D on A.deptno = D.dno and sal>40000;

	WAQTD ename all the detail of the dept if employee hired after 2015 and working in Delhi or Banglore.
	WAQTD ename deptname if the employee name starts with s or p and their dname has atleast one E in it.

	Outer Join : 
		    1.LEFT OUTER JOIN : an inner join is performed first. Then, for each row in table T1 that does not satisfy the join condition with any row in table T2, a joined row is added with null values in columns of T2. Thus, the joined table always has at least one row for each row in T1.
			Syntax : SELECT */Col_name FROM table1 LEFT OUTER JOIN table2 ON conditional_expression
		    
		    2.RIGHT OUTER JOIN : First, an inner join is performed. Then, for each row in table T2 that does not satisfy the join condition with any row in table T1, a joined row is added with null values in columns of T1. This is the converse of a left join; the result table will always have a row for each row in T2.
		        Syntax : SELECT */Col_name FROM table1 RIGHT OUTER JOIN table2 ON conditional_expression
		
		    3.FULL OUTER JOIN : First, an inner join is performed. Then, for each row in table T1 that does not satisfy the join condition with any row in table T2, a joined row is added with null values in columns of T2. In addition, for each row of T2 that does not satisfy the join condition with any row in T1, a joined row with null values in the columns of T1 is added. 
		    	Syntax : SELECT */col_name FROM table1 FULL OUTER JOIN table2 ON conditional_expression
	
	Self Join : A self-join is a query in which a table is joined to itself. Self-joins are useful for comparing values in a column of rows within the same table.
	Syntax : SELECT column_list FROM A a1 INNER JOIN A b1 ON join_predicate

	Natural join : A natural join can be an inner join, left join, or right join. If you do not specify a join explicitly e.g., INNER JOIN, LEFT JOIN, RIGHT JOIN, PostgreSQL will use the INNER JOIN by default.
	Syntax : SELECT * FROM Table1 NATURAL [INNER, LEFT, RIGHT] JOIN Table2;

	Single row function : 
	Date single row function 
 
	select current_date; To get the current date
	
	select current_time; To get the current time

	select clock_timestamp(); To get the both current time and date together
	
	select age (timestamp '2020-05-31',timestamp '1998-03-16'); To get the current age

	select extract (century from timestamp '2020-05-31'); To get the current century 
	
	select extract (century from timestamp '2020-05-31 12:10:11');
	
	select extract (decade from timestamp '2020-05-31'); to get the decade 
	
	select extract (day from timestamp '2020-05-31'); To get the current date

	select extract (dow from timestamp '2020-05-31'); to get the day of the week 

	select extract (doy from timestamp '2020-05-31'); to get the days have completed in the year

	select extract (week from timestamp '2020-05-31');  to get the week have completed in the year 

	select extract (month from timestamp '2020-05-31'); to get the month of the year

	select extract (hour from timestamp '2020-05-31 12:15:21'); to get the hour 

	select extract (min from timestamp '2020-05-31 12:15:21'); to get the minute

	select extract (sec from timestamp '2020-05-31 12:15:21'); to get the seconds 

	select now(); Function to get both the current time and current date

	select now():: date; Function to get only current date

	select now():: time; Function to get only current time
==================================================================================================================

	TCL : Transaction (it is a unit of work that is performed against a data base)
	It is used with DML commands (Insert, Update, Delete)s 
	
	Properties : ACID 

 	Atomicity : The entire transaction takes place at once or doesn’t happen at all.
	Consistency : This means that integrity constraints must be maintained so that the database is consistent before and after the transaction.
	Isolation : This property ensures that multiple transactions can occur concurrently without leading to the inconsistency of database state.
	Durability : This property ensures that once the transaction has completed execution, the updates and modifications to the database are stored in and written to disk and they persist even if a system failure occurs. 
	
	Atomicity
	All changes to data are performed as if they are a single operation. That is, all the changes are performed, or none of them are.
	For example, in an application that transfers funds from one account to another, the atomicity property ensures that, if a debit is made successfully from one account, the corresponding credit is made to the other account.
	
	Consistency
	Data is in a consistent state when a transaction starts and when it ends.
	For example, in an application that transfers funds from one account to another, the consistency property ensures that the total value of funds in both the accounts is the same at the start and end of each transaction.
	
	Isolation
	The intermediate state of a transaction is invisible to other transactions. As a result, transactions that run concurrently appear to be serialized.
	For example, in an application that transfers funds from one account to another, the isolation property ensures that another transaction sees the transferred funds in one account or the other, but not in both, nor in neither.
	
	Durability
	After a transaction successfully completes, changes to data persist and are not undone, even in the event of a system failure.
	For example, in an application that transfers funds from one account to another, the durability property ensures that the changes made to each account will not be reversed.

	Commit : The COMMIT command is the transactional command used to save changes invoked by a transaction to the database. The COMMIT command saves all the transactions to the database since the last COMMIT or ROLLBACK command.
	Rollback : The ROLLBACK command is the transactional command used to undo transactions that have not already been saved to the database. This command can only be used to undo transactions since the last COMMIT or ROLLBACK command was issued.
	
	idexcel_db=# Begin;
	BEGIN
	idexcel_db=# select * from dept_info;
	 dno |    dname    | location
	-----+-------------+----------
 	  10 | Development | Banglore
 	  20 | Testing     | Banglore
  	  30 | HR          | Delhi
 	  40 | Admin       | Mysore
 	  50 | Sales       | Pune
 	  60 | research    | Gurugram
	 (6 rows)


	idexcel_db=# insert into dept_info values (70,'RND','Banglore');
	INSERT 0 1
	idexcel_db=# select * from dept_info;
	 dno |    dname    | location
	-----+-------------+----------
	  10 | Development | Banglore
	  20 | Testing     | Banglore
 	  30 | HR          | Delhi
	  40 | Admin       | Mysore
  	  50 | Sales       | Pune
	  60 | research    | Gurugram
	  70 | RND         | Banglore
	(7 rows)


	idexcel_db=# rollback;
	ROLLBACK
	idexcel_db=# select * from dept_info;
	 dno |    dname    | location
	-----+-------------+----------
	  10 | Development | Banglore
	  20 | Testing     | Banglore
	  30 | HR          | Delhi
	  40 | Admin       | Mysore
	  50 | Sales       | Pune
	  60 | research    | Gurugram
	(6 rows)

	idexcel_db=# commit;
	WARNING:  there is no transaction in progress
	COMMIT.

======================================================================================================================
	
	Savepoint : 
	
	idexcel_db=# begin;
	BEGIN
	idexcel_db=# insert into dept_info values (70,'RND','Banglore');
	INSERT 0 1
	idexcel_db=# select * from dept_info;
 	dno |    dname    | location
	-----+-------------+----------
  	10 | Development | Banglore
  	20 | Testing     | Banglore
  	30 | HR          | Delhi
  	40 | Admin       | Mysore
  	50 | Sales       | Pune
  	60 | research    | Gurugram
  	70 | RND         | Banglore
	(7 rows)


	idexcel_db=# savepoint test;
	SAVEPOINT
	idexcel_db=# delete from dept_info where dno=70;
	DELETE 1
	idexcel_db=# delete from dept_info where dno=60;
	DELETE 1
	idexcel_db=# rollback to savepoint test;
	ROLLBACK
	idexcel_db=# select * from dept_info;
 	dno |    dname    | location
	-----+-------------+----------
	10 | Development | Banglore
  	20 | Testing     | Banglore
	30 | HR          | Delhi
 	40 | Admin       | Mysore
  	50 | Sales       | Pune
  	60 | research    | Gurugram
  	70 | RND         | Banglore
	(7 rows)


	idexcel_db=# commit;
	COMMIT.

	Normalization : 

	 Keys :

	 Key attribute : KA helps us to identify a records Uniquely present in the table
	 Non key attribute : Helps us to identify Apart from key attributes in the record present in the table  
	 Prime key attribute : A primary key is a column in a table whose values uniquely identify the rows in the table.
	 Non prime attribute : Apart from a primary key is a column in a table whose values not uniquely identify the rows in the table.
	 Composite key attribute : Combination of 2 or more attribute which used to identify record in the record. 
	 super key : A single attribute or a set of attributes that can uniquely identify all attributes of a particular relation is called Super key
	 foriegn key : Helps us to establish the relationship between two tables

	Functional dependency : A functional dependency (FD) is a relationship between two attributes, typically between the PK and other non-key attributes within a table.

	Realtionship between attributes of a table helps us to prevent in data retendency and anomoly

	Types of Functional dependency : 
	
	1. Total Functional Dependency 
	If all attribute of a relation a determined by a key attribute called as TFD	
	R--> ABCD 
	A --> B
	A --> C
	A --> D

	A is the key attribute 
	(BCD) dependent on A 

	2. Partial Functional Dependency
	R--> ABCD 
	AB --> C
	A --> C
	A --> D
	
	AB is a composite key 

	A realtion is to said to have partial FD if 
	1. It consitis a composite key attribute 
	2. there exsists a dependency such that an attribute can be determined by another attribute whcih is part of composite key attribute 
		
	3. Transitive FD 







