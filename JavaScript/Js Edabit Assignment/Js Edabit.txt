-------Easy------

1) Bitwise Operations

function bitwiseAND(n1, n2) {
	return(n1&n2)
}

function bitwiseOR(n1, n2) {
	return(n1|n2)	
}

function bitwiseXOR(n1, n2) {
	return(n1^n2)
}

2) Matchstick Houses

function matchHouses(step) {
 if(step == 0){
    return 0;
}else{
    return (step*6)-(step-1);	
}
}

3)Add up the Numbers from a Single Number

function addUp(num) {
	return num = (num * (num+1))/2;
}

4)Which Function Returns the Larger Number?

function whichIsLarger(f, g) {
	if(f()>g()){
		return `f`;
	}else if(f()<g()){
		return `g`;
	}else{
		return  `neither`;
	}
}

5)Find the Smallest and Biggest Numbers

function minMax(arr) {
	var min  = Math.min(...arr);
	var max = Math.max(...arr);
	return[min,max]
}

6)Check if One Array can be Nested in Another

function canNest(arr1, arr2) {
if(Math.min(...arr1)>Math.min(...arr2)&&Math.max(...arr1)<Math.max(...arr2)){
	return true;
}	else{
	return false;
}
}

7)Highest Digit

function highestDigit(number){
  number = number.toString();
	return Math.max(...number);
}

8)Convert a Number to Base 2

function binary(decimal) {
	return decimal.toString(2);
}

9)Is it Time for Milk and Cookies?

function timeForMilkAndCookies(date) {
	return date.getMonth()===11 && date.getDate()===24;
}

10)Number of Squares in a n * n Grid

function numberSquares(n) {
	return n *(n+1)*(2*n+1)/6;
}

-----------------Medium----------------------------

1)How Much is True?

function countTrue(arr) {
	 var count=0;
	for(var i=0;i<arr.length;i++){
		if(arr[i] === true){
			count++;
		}
	}
	return count;
} 

2)A Redundant Function

function redundant(str) {
	return function(){
		return str
	}
}

3)RegEx Exercise: An empty string

const REGEXP = /^$/;

4)Array of Multiples

function arrayOfMultiples (num, length) {
	var neW = [];
	for(var i = 1;i<=length;i++){
		neW.push(num*i)
	}
	return neW;
}

5)Triangular Number Sequence

function triangle(n) {
	return n * (n+1)/2;
}

6)Concatenate Variable Number of Input Arrays

function concat(...args) {
	var newArr = [];
	return newArr.concat(...args);
}

7)Even or Odd Number of Factors

function factorGroup(num) {
	var no = 0;
	for(var i = 1;i<=num;i++){
		if(num%i ===0){
			no++
		}
	}
	if(no % 2 == 0){
		return "even";
	}else{
		return "odd";
	}
}

8)All About Anonymous Functions: Adding Suffixes

function add_suffix(suffix) {
	return function(string){
		return string + suffix;
	}
}

9)Doubled Pay

function doubledPay(n) {
	return 2 ** n -1;
}

10)Basic Calculator

function calculator(num1, operator, num2) {
	switch(operator){
			case '+';
			return num1+num2;
			case '-';
			return num1-num2;
			case '*';
			return num1*num2;
			case '/';
			if(num2===0){
				return "cant divide"
			}else{
				return num1/num2;
			}		
	             }
                  }

11)Fix the Error: Value vs. Reference Types

// Fix this broken code!
function checkEquals(arr1, arr2) {
	if (arr1.join() === arr2.join()) {
  	return true 
  } else {
  	return false
  }
}

12)Fix the Error: Flattening an Array

function flatten(arr) {
  arr2 = [];
  for (let i = 0; i < arr.length; i++) {
    arr2 = arr2.push(arr[i]);
  }
  return arr2; 
}

13)Count Ones in Binary Representation of Integer

function countOnes(i) {
	var num = 0;
	while(i>0){
		r += i&1;
		i>>=1;
	}
	return r;
}

14)Algebra Sequence â€” Boxes

function boxSeq(step) {
		return step + (step%2*2)
}

15)Promises I: What Is a Closure?

function greetingMaker() {
	return function closure(name) {
	  return salutation + ", " + name 	
	}
}

16)Volume of a Cone

var coneVolume=(h,r) => Number(((Math.PI * r * r * h)/3).toFixed(2));

17)Find the Mean of All Digits

function mean(num) {
	let s=String(Math.abs(num)).split('');
	return s.reduce((x,y)=>x+Number(y),0)/s.length;
}

18)Hitting the Jackpot

function testJackpot(result) {
	return new set(result).size ===1
}

19)Count Ones in Binary Representation of Integer

function countOnes(i) {
  i = i.toString(2);
	return i.split('1').length-1;
}

20)One Odd and One Even

var oneOddOneEven = n => ~~(n / 10) % 2 !== n % 2;